<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
         http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">
	<!-- 加载redis配置文件 -->
	<util:properties id="redisProps" location="classpath:config/init/redis.properties" />
	
	<bean id="redisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		p:timeout="#{redisProps['redis.expire.time']}" p:database="#{redisProps['redis.database']}" p:password="#{redisProps['redis.password']}" p:usePool="true" >
		<!-- 单机配置 ↓-->
			<property name="hostName" value="#{redisProps['redis.host']}" />
			<property name="port" value="#{redisProps['redis.port']}" />
			<property name="poolConfig">
				<bean class="redis.clients.jedis.JedisPoolConfig">
					<property name="maxTotal" value="#{redisProps['redis.pool.maxActive']}" />
					<property name="maxIdle" value="#{redisProps['redis.pool.maxIdle']}" />
					<property name="maxWaitMillis" value="#{redisProps['redis.pool.maxWait']}" />
					<property name="testOnBorrow" value="#{redisProps['redis.pool.testOnBorrow']}" />
					<property name="testOnReturn" value="#{redisProps['redis.pool.testOnReturn']}" />
				</bean>
			</property>
		<!-- 单机配置 ↑ -->
		<!-- 集群配置 ↓ -->
		<!-- <constructor-arg name="clusterConfig">
	            <bean class="org.springframework.data.redis.connection.RedisClusterConfiguration">
	                <constructor-arg name="clusterNodes">
	                    <set>
	                        <value>#{redisProps['redis.redisClusterConfiguration.clusters']}</value>
	                    </set>
	                </constructor-arg> -->
	                <!-- 集群节点配置方式二  创建多个clusterNode-->
	                <!-- <property name="clusterNodes">
	                    <set>
		                    <bean class="org.springframework.data.redis.connection.RedisClusterNode">  
								<constructor-arg name="host" value="#{redisProps['redis.host']}"></constructor-arg>  
								<constructor-arg name="port" value="#{redisProps['redis.port']}"></constructor-arg>  
							</bean> 
	                    </set>
	                </property> -->
                <!-- <property name="maxRedirects" value="#{redisProps['redis.redisClusterConfiguration.maxRedirects']}" />
            </bean>
        </constructor-arg> -->

        <constructor-arg name="poolConfig">
            <bean class="redis.clients.jedis.JedisPoolConfig">
				<property name="maxTotal" value="#{redisProps['redis.pool.maxActive']}" />
				<property name="maxIdle" value="#{redisProps['redis.pool.maxIdle']}" />
				<property name="maxWaitMillis" value="#{redisProps['redis.pool.maxWait']}" />
				<property name="testOnBorrow" value="#{redisProps['redis.pool.testOnBorrow']}" />
				<property name="testOnReturn" value="#{redisProps['redis.pool.testOnReturn']}" />
			</bean>
        </constructor-arg>
		<!-- 集群配置 ↑-->	
	</bean>
	<bean id="jacksonSerializer" class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>
    <bean id="stringRedisSerializer"  class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
	<bean id="redisSupport" class="com.wbsf.core.redis.RedisSupport" p:connectionFactory-ref="redisConnectionFactory" >
	   <property name="keySerializer">
        	<ref bean="stringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
           <ref bean="jacksonSerializer"/>
        </property>
        <property name="hashKeySerializer">
        	<ref bean="stringRedisSerializer"/>
        </property>
        <property name="hashValueSerializer">
           <ref bean="jacksonSerializer"/>
        </property>
        <property name="defaultSerializer">
         	 <ref bean="stringRedisSerializer"/>
        </property>
        <!-- 配置true可以使用transactional控制事务 -->
        <property name="enableTransactionSupport" value="true"/>
	</bean>
    <bean id="redisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">  
         <constructor-arg name="redisOperations" ref="redisSupport" />  
        <property name="defaultExpiration" value="#{redisProps['redis.expire.time']}"/>  
    </bean>
    
    <!-- 启用缓存注解功能，这个是必须的，否则注解不会生效，另外，该注解一定要声明在spring主配置文件中才会生效 -->
    <cache:annotation-driven cache-manager="redisCacheManager"/>

    <!-- 若要集成单点登陆默认路径为request.getContextPath() + "/"，在此修改为根 -->
    <bean id="cookieSerializer" class="org.springframework.session.web.http.DefaultCookieSerializer">
        <property name="cookiePath" value="/"></property>
    </bean>
    
    <bean id="redisHttpSessionConfiguration"
          class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">
        <!--超时时间,默认1800秒-->
        <property name="maxInactiveIntervalInSeconds" value="${sys.config.session.sessionTimeout}" />
        <property name="defaultRedisSerializer">
        	<ref bean="jacksonSerializer"/>
        </property>
    </bean>
    
    <!-- 让Spring Session不再执行config命令 -->
   <!--  <util:constant static-field="org.springframework.session.data.redis.config.ConfigureRedisAction.NO_OP"/> -->
</beans>