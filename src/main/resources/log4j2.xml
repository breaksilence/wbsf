<?xml version="1.0" encoding="UTF-8"?>
<!-- log4j2使用说明
    获取logger实例方式：
        private static final Logger logger = LogManager.getLogger(实际类名.class.getName());
    日志说明：
    （1）请根据实际情况配置各项参数
    （2）需要注意日志文件备份数和日志文件大小，注意预留目录空间
    （3）实际部署的时候log.file.path变量需要修改成linux目录
 -->
 <!--
    status : 这个用于设置log4j2自身内部的信息输出,可以不设置,默认为OFF,当设置成trace时,会看到log4j2内部各种详细输出
    monitorInterval : Log4j能够自动检测修改配置文件和重新配置本身, 设置间隔秒数。如果值设置为0或负数，log4j 2不会对配置变更进行监测。log4j 2.0在重新配置的时候不会丢失之前的日志记录
-->
<!-- 
    log4j2的过滤器也将返回三类状态：Accept（接受）, Deny（拒绝） 或Neutral（中立）。
其中:
    Accept意味着不用再调用其他过滤器了，这个LogEvent将被执行；
    Deny意味着马上忽略这个event，并将此event的控制权交还给过滤器的调用者；
    Neutral则意味着这个event应该传递给别的过滤器，如果再没有别的过滤器可以传递了，那么就由现在这个过滤器来处理。
 -->
 <!-- 
        %r 指的是程序运行至输出这句话所经过的时间（以毫秒为单位）； 
        %t 指的是发起这一log request的线程； 
        %c 指的是log的level； 
        %m 指的是log request语句携带的message。 
        %n 为换行符。
  -->
  <!-- 
  og4j2中的日志一般分8个级别：ALL、TRACE、DEBUG、INFO、WARN、ERROR、FATAL、OFF。
    其中ALL为所有日志，OFF为关闭日志，所以，其实也就是6个级别：
        FATAL：用在极端的情形中，即必须马上获得注意的情况。这个程度的错误通常需要触发运维工程师的寻呼机。 
        ERROR：显示一个错误，或一个通用的错误情况，但还不至于会将系统挂起。这种程度的错误一般会触发邮件的发送，将消息发送到alert list中，运维人员可以在文档中记录这个bug并提交。 
        WARN：不一定是一个bug，但是有人可能会想要知道这一情况。如果有人在读log文件，他们通常会希望读到系统出现的任何警告。 
        INFO：用于基本的、高层次的诊断信息。在长时间运行的代码段开始运行及结束运行时应该产生消息，以便知道现在系统在干什么。但是这样的信息不宜太过频繁。 
        DEBUG：用于协助低层次的调试。 
        TRACE：用于展现程序执行的轨迹。 
    这8个级别优先级从低到高为：ALL<TRACE<DEBUG<INFO<WARN<ERROR<FATAL<OFF。
   -->
<configuration status="info"  monitorInterval="60" xmlns="http://logging.apache.org/log4j/2.0/config">
    <!-- 定义日志的全局变量 -->
    <Properties>
        <Property name="log.info.file.name">wbsf_info.log</Property>
        <Property name="log.error.file.name">wbsf_error.log</Property>
        <Property name="log.debug.file.name">wbsf_debug.log</Property>
        <Property name="log.Warn.file.name">wbsf_Warn.log</Property>
        <!-- 配置日志文件输出目录 -->
        <Property name="log.file.path">D:/log/wbsf/</Property>
      </Properties>
    <!--先定义所有的appender-->
    <appenders>
        <!--控制台日志输出配置-->
        <Console name="Console" target="SYSTEM_OUT">
             <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="trace" onMatch="ACCEPT" onMismatch="DENY" />
            <!--输出日志的格式-->
            <PatternLayout pattern="%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n" />
        </Console>
        
        <!--打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="RollingInfoFile" fileName="${log.file.path}${log.info.file.name}"
            filePattern="${log.file.path}$${date:yyyy-MM}/app-%d{yyyyMMddHHmmssSSS}.log.gz">
            <PatternLayout
                pattern="%d{yyyy.MM.dd 'at' HH:mm:ss.SSS z} %-5level %class{36} %L %M - %msg%xEx%n" />
            <Filters>
               <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
             </Filters>
            <!-- 日志文件大小 -->
            <SizeBasedTriggeringPolicy size="50MB" />
            <!-- 最多保留文件数 -->
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>
        <!--打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="RollingErrorFile" fileName="${log.file.path}${log.error.file.name}"
            filePattern="${log.file.path}$${date:yyyy-MM}/app-%d{yyyyMMddHHmmssSSS}.log.gz">
            <PatternLayout
                pattern="%d{yyyy.MM.dd 'at' HH:mm:ss.SSS z} %-5level %class{36} %L %M - %msg%xEx%n" />
            <Filters>
              	<ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
             </Filters>
            <!-- 日志文件大小 -->
            <SizeBasedTriggeringPolicy size="50MB" />
            <!-- 最多保留文件数 -->
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>
        <!--打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="RollingDebugFile" fileName="${log.file.path}${log.debug.file.name}"
            filePattern="${log.file.path}$${date:yyyy-MM}/app-%d{yyyyMMddHHmmssSSS}.log.gz">
            <PatternLayout
                pattern="%d{yyyy.MM.dd 'at' HH:mm:ss.SSS z} %-5level %class{36} %L %M - %msg%xEx%n" />
             <Filters>
        	 	<ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
        	 </Filters>
            <!-- 日志文件大小 -->
            <SizeBasedTriggeringPolicy size="50MB" />
            <!-- 最多保留文件数 -->
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>
        <!--打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="RollingWarnFile" fileName="${log.file.path}${log.error.file.name}"
            filePattern="${log.file.path}$${date:yyyy-MM}/app-%d{yyyyMMddHHmmssSSS}.log.gz">
            <PatternLayout
                pattern="%d{yyyy.MM.dd 'at' HH:mm:ss.SSS z} %-5level %class{36} %L %M - %msg%xEx%n" />
            <Filters>
               <ThresholdFilter level="WARN" onMatch="ACCEPT" onMismatch="DENY"/>
             </Filters>
            <!-- 日志文件大小 -->
            <SizeBasedTriggeringPolicy size="50MB" />
            <!-- 最多保留文件数 -->
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>
    </appenders>
    
    <!-- 定义logger,只有定义了logger并引入的appender,appender才会生效-->
    <loggers>
        <Root level="info">
            <AppenderRef ref="Console" />
            <AppenderRef ref="RollingErrorFile" />
        </Root>
        <!--建立一个默认的root的logger-->
        <Logger name="com.wbsf" level="info"
            additivity="true">
            <AppenderRef ref="RollingInfoFile" />
            <AppenderRef ref="RollingErrorFile" />
            <AppenderRef ref="RollingDebugFile" />
            <AppenderRef ref="RollingWarnFile" />
        </Logger>
        <Logger name="org.springframework" level="error"
            additivity="true">
            <AppenderRef ref="RollingInfoFile" />
            <AppenderRef ref="RollingErrorFile" />
            <AppenderRef ref="RollingDebugFile" />
            <AppenderRef ref="RollingWarnFile" />
        </Logger>
    </loggers>
</configuration>